#!/usr/sbin/nft -f
#
# simplewall_rules.conf
#
# This script adds rules to the netfilter chains created by simplewall_init.conf
#
#


### Define firewall RULES ##########
#
# Add rules to the chains created by the script simplewall_init.conf, allowing network
# traffic as intended by the firewall.
#

# Define your interfaces here
# Replace the values with the interface names of your system or comment/delete
define lbk = lo				# loopback interface
define vpn = wg0			# VPN interface (example: wg0 for wireguard)
define lan = eth1			# lan interface
define gst = eth1.10		# vlan interface for guests
define iot = eth1.20		# vlan inerface for IoT devices
define wan = eth0			# wan interface to the internet

# Define some ports
define VPN_PT = 51820		# listening port of the VPN server
define DNAT1_PT = 54321		# port defined for destination nat
define DNS_PT = 53			# DNS port
define DHC_PT = 67			# DHCP port

# Define some internal machine names to be used in specific rules
define DNAT1_machine = 192.168.1.160

# Flush the filter and nat tables
flush chain simplefilter simplefilter_in
flush chain simplefilter simplefilter_fwd
flush chain simplefilter simplefilter_out

flush chain simplenat simplenat_prer
flush chain simplenat simplenat_postr

# Add devices to the flowtable 
table ip simplefilter {
	flowtable F1 {
		# Add/uncomment or remove/comment devices (interfaces, essentially)
		# Note that devices must exist!
		devices = { \
			#$vpn, \
			$lan, \
			#$gst, \
			#$iot, \
			$wan \
		}
	}
}

#
# At this point all firewall and nat chains are empty, without any rules.
# Time to setup the firewall.
#
table ip simplefilter {
	chain simplefilter_in {
		#
		# Traffic going into the firewall machine
		#
		#
		# HERE go the rules for the firewall INPUT CHAIN 
		#
		#
		
		# The basic stateful rule
		ct state vmap { established : accept, related : accept, invalid : drop }
		
		# Some hardening for trash tcp flags
		tcp flags & (fin|syn|rst|ack) != syn ct state {new} drop
		
		# Allow traffic from the following interfaces:
		iifname $lbk accept
		iifname $lan accept
		iifname $vpn accept
		
		# Allow DNS and DHCP requests from guest or iot interfaces:
		iifname { $gst, $iot } meta l4proto { tcp, udp } th dport $DNS_PT accept
		iifname { $gst, $iot } udp dport $DHC_PT accept
		
		# Allow traffic from udp WAN port VPN_PT:
		iifname $wan udp dport $VPN_PT accept
	}
	chain simplefilter_fwd {
		#
		# Traffic going through the firewall machine
		#
		#
		# HERE go the rules for the firewall FORWARD CHAIN
		#
		#
		
		# Use flowtable for offloading forward traffic:
		meta l4proto { tcp,udp } flow offload @F1
		
		# The basic stateful rule
		ct state vmap { established : accept, related : accept, invalid : drop }
		
		# Allow traffic from the following interfaces to WAN:
		iifname $lan oifname $wan accept
		iifname $gst oifname $wan accept
		iifname $iot oifname $wan accept
		
		# Allow traffic from the VPN interface to LAN and (!) WAN:
		iifname $vpn oifname { $lan, $wan } accept
		
		# Allow traffic from WAN to the destined port $DNAT1_PT of the destined
		# internal machine $DNAT1_machine. Note that you also need a corresponding
		# destination nat rule for this (see below in the nat table)
		iifname $wan ip daddr $DNAT1_machine tcp dport $DNAT1_PT accept
	}
	chain simplefilter_out {
		#
		# Traffic going out from the firewall machine
		#
		#
		# HERE go the rules for the firewall OUTPUT CHAIN
		#
		#
		
		# The basic and only stateful rule for the output chain:
		# we trust our firewall machine to send out requests for new
		# connections or reply to established/related connections!
		ct state { established,related,new } accept
	}
}

table ip simplenat {
	chain simplenat_prer {
		#
		# HERE go the rules for the firewall DESTINATION NAT
		#
		
		# Destination nat rule for machine $DNAT1_machine on tcp port $DNAT1_PT
		# This is also known as port forwarding
		iifname $wan tcp dport $DNAT1_PT dnat to $DNAT1_machine:$DNAT1_PT
	}
	chain simplenat_postr {
		#
		# HERE go the rules for the firewall SOURECE NAT
		#
		
		# Enable masquerade on the WAN interface.
		# This initiates PAT and is essential in a home router/firewall for the
		# internal machines accessing the internet over one single ip address
		# provided by your ISP
		oifname $wan masquerade 
	}
}
